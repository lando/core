#!/usr/bin/env node


/**
 * Main CLI entrypoint that wraps @lando/core@3 or @lando/core@4
 * This file is meant to be linked as a lando "executable".
 *
 * @name lando
 */

'use strict';

// set this first for all other downstream concerns
const dns = require('dns');
// Set DNS result order to IPv4 first
dns.setDefaultResultOrder('ipv4first');

// other mods
const fs = require('fs');
const path = require('path');

const _ = require('lodash');
const argv = require('@lando/argv');

const defaultConfig = require('../utils/get-default-config');
const getApp = require('../utils/get-app');
const getLandoFiles = require('../utils/get-lando-files');
const lmerge = require('../utils/legacy-merge');

// if DEBUG is set then unset it, we dont want it to toggle any debugging inside of lando
// @NOTE: are we sure? or at the very least are we sure dont want to do something with its value?
if (process.env.DEBUG) delete process.env.DEBUG;

// start assessing debug situation with LANDO_DEBUG
if (process.env.LANDO_DEBUG) {
  const scope = process.env.LANDO_DEBUG === 1
    || process.env.LANDO_DEBUG === '1'
    || process.env.LANDO_DEBUG === true
    || process.env.LANDO_DEBUG === 'true' ? 'lando*' : process.env.LANDO_DEBUG;
  require('debug').enable(scope);
}

// @NOTE: reconsider this when we have lando 4 arg parsing? or have that just be a lando 4 thing?
// then handle legacy --verbose flags next
// if (argv.hasOption('--verbose')
//   || argv.hasOption('-v')
//   || argv.hasOption('-vv')
//   || argv.hasOption('-vvv')
//   || argv.hasOption('-vvvv')) {
//   require('debug').enable('lando*');
// }

// and finally prefer --debug
if (argv.hasOption('--debug')) {
  require('debug').enable(argv.getOption('--debug', {defaultValue: 'lando*'}));
}

// debugger
const id = path.basename(process.argv[1]);
const debug = require('debug')(id || 'lando');

// now load in the runtime selector
const pjson = require(path.resolve(__dirname, '..', 'package.json'));

// start the preflight
debug('starting %o version %o runtime selector...', id, pjson.version);

// allow envvars to override a few core things
// @NOTE: we've kept these around for backwards compatibility, you probably shouldnt use them though
const LOGLEVELCONSOLE = process.env.LANDO_CORE_LOGLEVELCONSOLE || debug.enabled ? 4 : undefined;
const ENVPREFIX = process.env.LANDO_CORE_ENVPREFIX;
const USERCONFROOT = process.env.LANDO_CORE_USERCONFROOT;
const RUNTIME = process.env.LANDO_CORE_RUNTIME;

// start by "minstrapping" the lando/app config
// primarily this means getting the MININMAL amount of stuff we need to determine the runtime to be used
let config = defaultConfig({envPrefix: ENVPREFIX, runtime: RUNTIME, userConfRoot: USERCONFROOT});

// @NOTE: is it safe to assume configSources exists and is iterable? i think so?
for (const file of config.configSources) {
  config = lmerge(config, require('../utils/load-file')(file));
  debug('merged in additional config source from file %o', file);
}

// merge in any envvars that set things
if (config.envPrefix) {
  const data = require('../utils/load-envars')(config.envPrefix);
  config = lmerge(config, data);
  debug('merged in additional config source from %o envvars with data %o', `${config.envPrefix}_*`, data);
}

// log minconf result
debug('final assembled minconf is %O', config);

// try to get app configuration if we can
const {preLandoFiles, landoFile, postLandoFiles, userConfRoot} = config;

const landoFiles = getLandoFiles([preLandoFiles, [landoFile], postLandoFiles].flat(1));
const appConfig = (landoFiles.length > 0) ? getApp(landoFiles, userConfRoot) : {};

// if we have an app then normalize runtime and also log some helpful stuff
if (Object.keys(appConfig).length > 0) debug('detected an app %o at %o', appConfig.name, path.dirname(landoFiles[0]));

// gather core candidates
const cores = [
  path.join(config.userConfRoot, 'plugins', '@lando', 'core'),
  path.resolve(__dirname, '..'),
];

// if appConfig points to a different core lets set that here
if (typeof _.get(appConfig, 'plugins.@lando/core') === 'string') {
  cores.unshift(path.resolve(appConfig.root, appConfig.plugins['@lando/core']));
}

// return the first core that exists that we find
const COREBASE = _.find(cores, core => fs.existsSync(path.join(core, 'index.js')));

// Summon the implementation of @lando/cli@3 that works with @lando/core@3
const Cli = require(`${COREBASE}/lib/cli`);
const cli = new Cli(ENVPREFIX, LOGLEVELCONSOLE, USERCONFROOT, COREBASE, debug);
const getTasks = require(`${COREBASE}/utils/get-tasks`);
debug('starting lando with %o runtime using cli %o', `v3`, {ENVPREFIX, LOGLEVELCONSOLE, USERCONFROOT, COREBASE});

// Check for sudo usage
cli.checkPerms();

// Lando cache stuffs
process.lando = 'node';
process.landoTaskCacheName = '_.tasks.cache';
process.landoTaskCacheFile = path.join(cli.defaultConfig().userConfRoot, 'cache', process.landoTaskCacheName);
process.landoAppCacheFile = !_.isEmpty(appConfig) ? appConfig.composeCache : undefined;

// Check for a recipe cache and enforce manual app tasks cache clear if applicable
if (appConfig.recipe && !fs.existsSync(appConfig.recipeCache)) {
  if (fs.existsSync(process.landoAppCacheFile)) fs.unlinkSync(process.landoAppCacheFile);
}

// determine bs level
const bsLevel = !_.isEmpty(appConfig) && !fs.existsSync(process.landoAppCacheFile) ? 'APP' : 'TASKS';

// Check to see if we have a compose cache and if we dont then lets enforce a manual lando tasks cache clear
if (bsLevel === 'APP' && !fs.existsSync(appConfig.composeCache)) {
  if (fs.existsSync(process.landoTaskCacheFile)) fs.unlinkSync(process.landoTaskCacheFile);
}

// Print the cli if we've got tasks cached
if (fs.existsSync(process.landoTaskCacheFile)) {
  cli.run(getTasks(appConfig, cli.argv()), appConfig);
// Otherwise min bootstrap lando so we can generate the task cache first
} else {
  // NOTE: we require lando down here because it adds .5 seconds if we do it above
  const Lando = require(COREBASE);
  const lando = new Lando(cli.defaultConfig(appConfig));
  // add cli and appconfig for downstream usage
  lando.cli = cli;
  lando.appConfig = appConfig;

  // Bootstrap lando at the correct level
  lando.bootstrap(bsLevel).then(lando => {
    // If bootstrap level is APP then we need to get and init our app to generate the app task cache
    if (bsLevel === 'APP') {
      lando.getApp().init({noEngine: true}).then(() => cli.run(getTasks(appConfig, cli.argv()), appConfig));
    // Otherwise run as yooz
    } else {
      cli.run(getTasks(appConfig, cli.argv()), appConfig);
    }
  });
}
