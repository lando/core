name: Deploy npm

on:
  workflow_call:
    inputs:
      node-version:
        default: "20"
        description: The node version to use
        required: false
        type: string
    secrets:
      github-token:
        description: "The github token"
        required: true
      npm-token:
        description: "The npm deploy token"
        required: true

jobs:
  deploy-npm:
    runs-on: ubuntu-24.04
    env:
      TERM: xterm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install node ${{ inputs.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          registry-url: https://registry.npmjs.org
          cache: npm
      - name: Install dependencies
        run: npm clean-install --prefer-offline --frozen-lockfile
      - name: Lint code
        run: npm run lint
      - name: Run unit tests
        run: npm run test:unit
      - name: Update edge release alias
        shell: bash
        run: |
          if ./scripts/semcompare.sh "${{ github.event.release.tag_name }}" "$(cat ./release-aliases/3-EDGE)"; then
            echo "${{ github.event.release.tag_name }}" > ./release-aliases/3-EDGE
          fi
      - name: Update stable release alias
        shell: bash
        if: github.event.release.prerelease == false
        run: |
          if ./scripts/semcompare.sh "${{ github.event.release.tag_name }}" "$(cat ./release-aliases/3-STABLE)"; then
            echo "${{ github.event.release.tag_name }}" > ./release-aliases/3-STABLE
          fi
      - name: Prepare Release
        uses: lando/prepare-release-action@v3
        with:
          lando-plugin: true
          sync-token: ${{ secrets.github-token }}
          sync-email: rtfm47@lando.dev
          sync-username: rtfm-47
      - name: Publish to npm
        run: |
          VERSION=$(node -p "require('./package.json').version")
          PACKAGE=$(node -p "require('./package.json').name")

          if [ "${{ github.event.release.prerelease }}" ==  "false" ]; then
            npm publish --access public --dry-run
            npm publish --access public
            npm dist-tag add "$PACKAGE@$VERSION" edge

            echo "::notice title=Published $VERSION to $PACKAGE::This is a stable release published to the default 'latest' npm tag"
            echo "::notice title=Updated latest tag to $VERSION::The stable tag now points to $VERSION"
            echo "::notice title=Updated edge tag to $VERSION::The edge tag now points to $VERSION"
          else
            npm publish --access public --tag edge --dry-run
            npm publish --access public --tag edge

            echo "::notice title=Published $VERSION to $PACKAGE::This is a prerelease published to the 'edge' npm tag"
            echo "::notice title=Updated edge tag to $VERSION::The edge tag now points to $VERSION"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm-token }}
