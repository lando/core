name: Create Dev Releases

on:
  push:
    branches:
      - main
      - 'preview-**'

jobs:
  package:
    runs-on: ${{ matrix.runner }}
    env:
      TERM: xterm
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - '20'
        os:
          - linux
          - macos
          - win
        runner:
          - macos-14
          - ubuntu-24.04
        type:
          - '-slim'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
      - name: Install dependencies
        run: npm clean-install --prefer-offline --frozen-lockfile --production
      - name: Install fatcore
        if: matrix.type != '-slim'
        run: scripts/fatcore-install.sh --edge
      - name: Switch to edge channel
        run: |
          sed -i.bak "s/^channel: stable/channel: edge/" config.yml
          rm -rf config.yml.bak
      - name: Prepare Release
        uses: lando/prepare-release-action@v3
        with:
          version: dev
          sync: false
      - name: Package into node binary
        uses: lando/pkg-action@v5
        with:
          entrypoint: bin/lando
          node-version: ${{ matrix.node-version }}
          os: ${{ matrix.os }}
          options: --options dns-result-order=ipv4first
          pkg: "@yao-pkg/pkg@5.16.1"
      - name: Ensure version
        if: (matrix.os == 'linux' && runner.os == 'Linux') || (matrix.os == 'macos' && runner.os == 'macOS')
        run: ./dist/@lando/core version --all
      - name: Ensure ipv4first
        if: (matrix.os == 'linux' && runner.os == 'Linux') || (matrix.os == 'macos' && runner.os == 'macOS')
        run: ./dist/@lando/core config --path cli.args | grep dns-result-order=ipv4first
      - name: Ensure edge channel
        if: (matrix.os == 'linux' && runner.os == 'Linux') || (matrix.os == 'macos' && runner.os == 'macOS')
        run: ./dist/@lando/core config --path channel | grep edge
      - name: Ensure slimcore
        if: (matrix.os == 'linux' && runner.os == 'Linux') || (matrix.os == 'macos' && runner.os == 'macOS') && matrix.type == '-slim'
        run: ./dist/@lando/core config --path fatcore | grep false
      - name: Ensure fatcore
        if: (matrix.os == 'linux' && runner.os == 'Linux') || (matrix.os == 'macos' && runner.os == 'macOS') && matrix.type != '-slim'
        run:
          ./dist/@lando/core config --path fatcore | grep true
          ./dist/@lando/core config | grep -q "node_modules/@lando/wordpress"

  sign-n-deploy:
    runs-on: ${{ matrix.os }}
    needs:
      - package
    env:
      TERM: xterm
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            key: core-node20-win-x64-${{ github.sha }}
            file: lando/core.exe
            certificate-data: KEYLOCKER_CLIENT_CERT
            certificate-password: KEYLOCKER_CLIENT_CERT_PASSWORD
            result: lando-win-x64-${{ github.ref_name }}.exe
          - os: windows-2022
            key: core-node20-win-arm64-${{ github.sha }}
            file: lando/core.exe
            certificate-data: KEYLOCKER_CLIENT_CERT
            certificate-password: KEYLOCKER_CLIENT_CERT_PASSWORD
            result: lando-win-arm64-${{ github.ref_name }}.exe
          - os: macos-14
            key: core-node20-macos-x64-${{ github.sha }}
            file: lando/core
            certificate-data: APPLE_CERT_DATA
            certificate-password: APPLE_CERT_PASSWORD
            apple-product-id: dev.lando.cli
            apple-team-id: FY8GAUX282
            apple-notary-user: APPLE_NOTARY_USER
            apple-notary-password: APPLE_NOTARY_PASSWORD
            options: --options runtime --entitlements entitlements.xml
            result: lando-macos-x64-${{ github.ref_name }}
          - os: macos-14
            key: core-node20-macos-arm64-${{ github.sha }}
            file: lando/core
            certificate-data: APPLE_CERT_DATA
            certificate-password: APPLE_CERT_PASSWORD
            apple-product-id: dev.lando.cli
            apple-team-id: FY8GAUX282
            apple-notary-user: APPLE_NOTARY_USER
            apple-notary-password: APPLE_NOTARY_PASSWORD
            options: --options runtime --entitlements entitlements.xml
            result: lando-macos-arm64-${{ github.ref_name }}
          - os: ubuntu-24.04
            key: core-node20-linux-x64-${{ github.sha }}
            file: lando/core
            certificate-data: KEYLOCKER_CLIENT_CERT
            certificate-password: KEYLOCKER_CLIENT_CERT_PASSWORD
            result: lando-linux-x64-${{ github.ref_name }}
          - os: ubuntu-24.04
            key: core-node20-linux-arm64-${{ github.sha }}
            file: lando/core
            certificate-data: KEYLOCKER_CLIENT_CERT
            certificate-password: KEYLOCKER_CLIENT_CERT_PASSWORD
            result: lando-linux-arm64-${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download ${{ matrix.key }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.key }}
          path: lando
      - name: Sign and Notarize
        uses: lando/code-sign-action@v2
        id: code-sign-action
        with:
          file: ${{ matrix.file }}
          certificate-data: ${{ secrets[matrix.certificate-data] }}
          certificate-password: ${{ secrets[matrix.certificate-password] }}
          apple-notary-user: ${{ secrets[matrix.apple-notary-user] }}
          apple-notary-password: ${{ secrets[matrix.apple-notary-password] }}
          apple-product-id: ${{ matrix.apple-product-id }}
          apple-team-id: ${{ matrix.apple-team-id }}
          keylocker-host: https://clientauth.one.digicert.com
          keylocker-api-key: ${{ secrets.KEYLOCKER_API_KEY }}
          keylocker-cert-sha1-hash: ${{ secrets.KEYLOCKER_CERT_SHA1_HASH }}
          keylocker-keypair-alias: ${{ secrets.KEYLOCKER_KEYPAIR_ALIAS }}
          options: ${{ matrix.options }}
      - name: Rename as needed
        shell: bash
        run: |
          # create aliases
          mkdir -p releases
          cp ${{ steps.code-sign-action.outputs.file }} releases/${{ matrix.result }}
          cp releases/${{ matrix.result }} "releases/$(echo ${{ matrix.result }} | sed 's/${{ github.ref_name }}/latest/;')"
          cp releases/${{ matrix.result }} "releases/$(echo ${{ matrix.result }} | sed 's/${{ github.ref_name }}/dev/;')"
          chmod +x releases/*

          # create checksums
          ./scripts/generate-checksums.sh --directory releases --output checksums-dev.txt --depth 2
          # cat the data
          cat checksums-dev.txt
          # move the checksums so it is uploaded as well
          cp checksums-dev.txt releases/checksums-dev.txt

      - name: Configure S3 Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Upload dev releases to S3
        shell: bash
        run: aws s3 sync releases s3://files.lando.dev/core

